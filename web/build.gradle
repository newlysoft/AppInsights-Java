/*
 * AppInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply from: "$buildScriptsDir/publishing.gradle"

version = (version == "unspecified") ? "0.9.0-SNAPSHOT" : version
group = "com.microsoft.azure"
archivesBaseName = 'applicationinsights-web'
jar {
    destinationDir = new File("$buildDir/libs/web")
}

test {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug',
                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9995'
    }
}

dependencies {
    compile project(':core')
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0'
    testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '8.+'
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '8.+'
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '8.+'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
}

uploadArchives {
    if (requiredPropertiesExist(requriedProperties)) {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars

                repository(url: mavenRepositoryUrl) {
                    authentication(userName: mavenUsername, password: mavenUserPassword)
                }

                updatePomWithGeneralProjectInformation(pom)

                // Updating web pom specific values.
                pom.project {
                    name = project.msftAppInsights + " Java SDK Web Module"
                    description = "This is the web module of " + project.msftAppInsightsJavaSdk
                }

                pom.whenConfigured { p -> writePomToArtifactsDirectory(p, 'web') }
            }
        }
    }
}

// endregion Publishing tasks

// region Creating Sources & Javadocs jars

task generateWebSourcesJar(type: Jar) {
    archiveName = archivesBaseName + '-' + version + '-sources.jar'
    from sourceSets.main.allJava
    destinationDir = new File("$buildDir/libs/web")
}

task generateWebJavadocJar(type: Jar) {
    doFirst {
        javadoc.execute()
    }

    archiveName = archivesBaseName + '-' + version + '-javadoc.jar'
    from javadoc
    destinationDir = new File("$buildDir/libs/web")
}

assemble.doLast {
    generateWebSourcesJar.execute()
    generateWebJavadocJar.execute()
    copyLibsToGlobalArtifactsFolder {
        from 'build/libs'
    }.execute()
}

// endregion Creating Sources & Javadocs jars